
Dobby_for_Potter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000005d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e8  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004fd  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a14  00000000  00000000  00001f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00002940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000121d  00000000  00000000  00003077  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	27 c0       	rjmp	.+78     	; 0x62 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	38 d0       	rcall	.+112    	; 0xb4 <main>
  44:	89 c2       	rjmp	.+1298   	; 0x558 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <timer0_init>:
#define BUFFER_SIZE 6
char buffer[BUFFER_SIZE];
unsigned int count = 0;

void timer0_init(void) {
	TCCR0=(1<<CS00)|(1<<CS02); //1024 предделитель
  48:	85 e0       	ldi	r24, 0x05	; 5
  4a:	83 bf       	out	0x33, r24	; 51
	//asm("sei");
	sei();
  4c:	78 94       	sei
  4e:	08 95       	ret

00000050 <port_ini>:
}

void port_ini(void)
{
	DDRD |= (1<<PIND2);//соленоидный замок
  50:	8a 9a       	sbi	0x11, 2	; 17
	PORTD &= ~(1<<PIND2);
  52:	92 98       	cbi	0x12, 2	; 18
	DDRC |= (1<<PINC1)|(1<<PINC2)|(1<<PINC3)|(1<<PINC4)|(1<<PINC5);//поднесение носка, анектоды
  54:	84 b3       	in	r24, 0x14	; 20
  56:	8e 63       	ori	r24, 0x3E	; 62
  58:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<PINC1)|(1<<PINC2)|(1<<PINC3)|(1<<PINC4)|(1<<PINC5));
  5a:	85 b3       	in	r24, 0x15	; 21
  5c:	81 7c       	andi	r24, 0xC1	; 193
  5e:	85 bb       	out	0x15, r24	; 21
  60:	08 95       	ret

00000062 <__vector_9>:
}
 
 ISR (TIMER0_OVF_vect) {
  62:	1f 92       	push	r1
  64:	0f 92       	push	r0
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	0f 92       	push	r0
  6a:	11 24       	eor	r1, r1
  6c:	2f 93       	push	r18
  6e:	8f 93       	push	r24
  70:	9f 93       	push	r25
	 count++;
  72:	80 91 60 00 	lds	r24, 0x0060
  76:	90 91 61 00 	lds	r25, 0x0061
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	90 93 61 00 	sts	0x0061, r25
  80:	80 93 60 00 	sts	0x0060, r24
	 if (count > 700){
  84:	8d 3b       	cpi	r24, 0xBD	; 189
  86:	92 40       	sbci	r25, 0x02	; 2
  88:	68 f0       	brcs	.+26     	; 0xa4 <__vector_9+0x42>
		PORTD |= (1<<PIND2);//открыть шкатулку
  8a:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	8f e3       	ldi	r24, 0x3F	; 63
  8e:	9d e0       	ldi	r25, 0x0D	; 13
  90:	23 e0       	ldi	r18, 0x03	; 3
  92:	81 50       	subi	r24, 0x01	; 1
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	20 40       	sbci	r18, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <__vector_9+0x30>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <__vector_9+0x3a>
  9c:	00 00       	nop
		_delay_ms(250);
		PORTD &= ~(1<<PIND2);//убрать питание с соленоидного замка
  9e:	92 98       	cbi	0x12, 2	; 18
		DDRD = 0x00;
  a0:	11 ba       	out	0x11, r1	; 17
		cli();
  a2:	f8 94       	cli
	 }
 }
  a4:	9f 91       	pop	r25
  a6:	8f 91       	pop	r24
  a8:	2f 91       	pop	r18
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <main>:

int main(void)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <main+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <main+0x8>
  bc:	1f 92       	push	r1
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	int j=0;
	uchar card_num[5];
	port_ini();
  c2:	c6 df       	rcall	.-116    	; 0x50 <port_ini>
	MFRC522_Init();
  c4:	1b d2       	rcall	.+1078   	; 0x4fc <MFRC522_Init>
	timer0_init();
  c6:	c0 df       	rcall	.-128    	; 0x48 <timer0_init>
  c8:	8f e0       	ldi	r24, 0x0F	; 15
  ca:	97 e2       	ldi	r25, 0x27	; 39
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x18>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x1e>
  d2:	00 00       	nop
	 }
 }

int main(void)
{
	int j=0;
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	10 e0       	ldi	r17, 0x00	; 0
	{
		if ( MFRC522_Request( PICC_REQIDL, card_num ) == MI_OK ) {
			if ( MFRC522_Anticoll( card_num ) == MI_OK ) {
				if (card_num[1]==232){//носок
					PORTC |= (1<<PINC1);//сигнал поднесения носка
					TIMSK=(1<<TOIE0); // Запускаем таймер
  d8:	ff 24       	eor	r15, r15
  da:	f3 94       	inc	r15
					switch (j){
						case 1: PORTC |= (1<<PINC5); _delay_ms(4000); break;
						case 2: PORTC |= (1<<PINC4); _delay_ms(4000); break;
						case 3: PORTC |= (1<<PINC3); _delay_ms(4000); break;
						case 4: PORTC |= (1<<PINC2); _delay_ms(4000); break;
						case 5: PORTC &= ~((1<<PINC1)|(1<<PINC2)|(1<<PINC3)|(1<<PINC4)|(1<<PINC5)); j = 0; break;
  dc:	d1 2c       	mov	r13, r1
  de:	e1 2c       	mov	r14, r1
	MFRC522_Init();
	timer0_init();
	_delay_ms(10);
	while(1)
	{
		if ( MFRC522_Request( PICC_REQIDL, card_num ) == MI_OK ) {
  e0:	be 01       	movw	r22, r28
  e2:	6f 5f       	subi	r22, 0xFF	; 255
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	86 e2       	ldi	r24, 0x26	; 38
  e8:	a3 d1       	rcall	.+838    	; 0x430 <MFRC522_Request>
  ea:	81 11       	cpse	r24, r1
  ec:	0d c0       	rjmp	.+26     	; 0x108 <main+0x54>
			if ( MFRC522_Anticoll( card_num ) == MI_OK ) {
  ee:	ce 01       	movw	r24, r28
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	c9 d1       	rcall	.+914    	; 0x486 <MFRC522_Anticoll>
  f4:	81 11       	cpse	r24, r1
  f6:	08 c0       	rjmp	.+16     	; 0x108 <main+0x54>
				if (card_num[1]==232){//носок
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	88 3e       	cpi	r24, 0xE8	; 232
  fc:	19 f4       	brne	.+6      	; 0x104 <main+0x50>
					PORTC |= (1<<PINC1);//сигнал поднесения носка
  fe:	a9 9a       	sbi	0x15, 1	; 21
					TIMSK=(1<<TOIE0); // Запускаем таймер
 100:	f9 be       	out	0x39, r15	; 57
 102:	02 c0       	rjmp	.+4      	; 0x108 <main+0x54>
				} 
				else {
					PORTC &= ~(1<<PINC1);
 104:	a9 98       	cbi	0x15, 1	; 21
					PORTD &= ~(1<<PIND2);
 106:	92 98       	cbi	0x12, 2	; 18
				}
				
			}
		}
		
		if ( MFRC522_Request( PICC_REQIDL, card_num ) == MI_OK ) {
 108:	be 01       	movw	r22, r28
 10a:	6f 5f       	subi	r22, 0xFF	; 255
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	86 e2       	ldi	r24, 0x26	; 38
 110:	8f d1       	rcall	.+798    	; 0x430 <MFRC522_Request>
 112:	81 11       	cpse	r24, r1
 114:	e5 cf       	rjmp	.-54     	; 0xe0 <main+0x2c>
			if ( MFRC522_Anticoll( card_num ) == MI_OK ) {
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	b5 d1       	rcall	.+874    	; 0x486 <MFRC522_Anticoll>
 11c:	81 11       	cpse	r24, r1
 11e:	e0 cf       	rjmp	.-64     	; 0xe0 <main+0x2c>
				if (card_num[1]==121){//баночка (анекдоты)
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	89 37       	cpi	r24, 0x79	; 121
 124:	09 f0       	breq	.+2      	; 0x128 <main+0x74>
 126:	46 c0       	rjmp	.+140    	; 0x1b4 <main+0x100>
					j++;
 128:	0f 5f       	subi	r16, 0xFF	; 255
 12a:	1f 4f       	sbci	r17, 0xFF	; 255
					switch (j){
 12c:	03 30       	cpi	r16, 0x03	; 3
 12e:	11 05       	cpc	r17, r1
 130:	29 f1       	breq	.+74     	; 0x17c <main+0xc8>
 132:	3c f4       	brge	.+14     	; 0x142 <main+0x8e>
 134:	01 30       	cpi	r16, 0x01	; 1
 136:	11 05       	cpc	r17, r1
 138:	59 f0       	breq	.+22     	; 0x150 <main+0x9c>
 13a:	02 30       	cpi	r16, 0x02	; 2
 13c:	11 05       	cpc	r17, r1
 13e:	99 f0       	breq	.+38     	; 0x166 <main+0xb2>
 140:	cf cf       	rjmp	.-98     	; 0xe0 <main+0x2c>
 142:	04 30       	cpi	r16, 0x04	; 4
 144:	11 05       	cpc	r17, r1
 146:	29 f1       	breq	.+74     	; 0x192 <main+0xde>
 148:	05 30       	cpi	r16, 0x05	; 5
 14a:	11 05       	cpc	r17, r1
 14c:	69 f1       	breq	.+90     	; 0x1a8 <main+0xf4>
 14e:	c8 cf       	rjmp	.-112    	; 0xe0 <main+0x2c>
						case 1: PORTC |= (1<<PINC5); _delay_ms(4000); break;
 150:	ad 9a       	sbi	0x15, 5	; 21
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	23 ed       	ldi	r18, 0xD3	; 211
 156:	80 e3       	ldi	r24, 0x30	; 48
 158:	91 50       	subi	r25, 0x01	; 1
 15a:	20 40       	sbci	r18, 0x00	; 0
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0xa4>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0xae>
 162:	00 00       	nop
 164:	bd cf       	rjmp	.-134    	; 0xe0 <main+0x2c>
						case 2: PORTC |= (1<<PINC4); _delay_ms(4000); break;
 166:	ac 9a       	sbi	0x15, 4	; 21
 168:	9f ef       	ldi	r25, 0xFF	; 255
 16a:	23 ed       	ldi	r18, 0xD3	; 211
 16c:	80 e3       	ldi	r24, 0x30	; 48
 16e:	91 50       	subi	r25, 0x01	; 1
 170:	20 40       	sbci	r18, 0x00	; 0
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0xba>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0xc4>
 178:	00 00       	nop
 17a:	b2 cf       	rjmp	.-156    	; 0xe0 <main+0x2c>
						case 3: PORTC |= (1<<PINC3); _delay_ms(4000); break;
 17c:	ab 9a       	sbi	0x15, 3	; 21
 17e:	9f ef       	ldi	r25, 0xFF	; 255
 180:	23 ed       	ldi	r18, 0xD3	; 211
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	91 50       	subi	r25, 0x01	; 1
 186:	20 40       	sbci	r18, 0x00	; 0
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0xd0>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0xda>
 18e:	00 00       	nop
 190:	a7 cf       	rjmp	.-178    	; 0xe0 <main+0x2c>
						case 4: PORTC |= (1<<PINC2); _delay_ms(4000); break;
 192:	aa 9a       	sbi	0x15, 2	; 21
 194:	9f ef       	ldi	r25, 0xFF	; 255
 196:	23 ed       	ldi	r18, 0xD3	; 211
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	91 50       	subi	r25, 0x01	; 1
 19c:	20 40       	sbci	r18, 0x00	; 0
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0xe6>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0xf0>
 1a4:	00 00       	nop
 1a6:	9c cf       	rjmp	.-200    	; 0xe0 <main+0x2c>
						case 5: PORTC &= ~((1<<PINC1)|(1<<PINC2)|(1<<PINC3)|(1<<PINC4)|(1<<PINC5)); j = 0; break;
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	81 7c       	andi	r24, 0xC1	; 193
 1ac:	85 bb       	out	0x15, r24	; 21
 1ae:	0d 2d       	mov	r16, r13
 1b0:	1e 2d       	mov	r17, r14
 1b2:	96 cf       	rjmp	.-212    	; 0xe0 <main+0x2c>
					}
				}
				else{
					PORTC &= ~((1<<PINC2)|(1<<PINC3)|(1<<PINC4)|(1<<PINC5));
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	83 7c       	andi	r24, 0xC3	; 195
 1b8:	85 bb       	out	0x15, r24	; 21
 1ba:	92 cf       	rjmp	.-220    	; 0xe0 <main+0x2c>

000001bc <Write_MFRC522>:
	uchar buff[4];
	buff[0] = PICC_HALT;
	buff[1] = 0;
	MFRC522_CalulateCRC(buff, 2, &buff[2]);
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
}
 1bc:	cf 93       	push	r28
 1be:	c6 2f       	mov	r28, r22
 1c0:	a8 98       	cbi	0x15, 0	; 21
 1c2:	88 0f       	add	r24, r24
 1c4:	8e 77       	andi	r24, 0x7E	; 126
 1c6:	bf d1       	rcall	.+894    	; 0x546 <spi_send_byte>
 1c8:	8c 2f       	mov	r24, r28
 1ca:	bd d1       	rcall	.+890    	; 0x546 <spi_send_byte>
 1cc:	a8 9a       	sbi	0x15, 0	; 21
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <Read_MFRC522>:
 1d2:	a8 98       	cbi	0x15, 0	; 21
 1d4:	88 0f       	add	r24, r24
 1d6:	8e 77       	andi	r24, 0x7E	; 126
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	b5 d1       	rcall	.+874    	; 0x546 <spi_send_byte>
 1dc:	b8 d1       	rcall	.+880    	; 0x54e <spi_read_byte>
 1de:	a8 9a       	sbi	0x15, 0	; 21
 1e0:	08 95       	ret

000001e2 <MFRC522_Reset>:
 1e2:	6f e0       	ldi	r22, 0x0F	; 15
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	ea df       	rcall	.-44     	; 0x1bc <Write_MFRC522>
 1e8:	08 95       	ret

000001ea <MFRC522_SetBitMask>:
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	d8 2f       	mov	r29, r24
 1f0:	c6 2f       	mov	r28, r22
 1f2:	ef df       	rcall	.-34     	; 0x1d2 <Read_MFRC522>
 1f4:	68 2f       	mov	r22, r24
 1f6:	6c 2b       	or	r22, r28
 1f8:	8d 2f       	mov	r24, r29
 1fa:	e0 df       	rcall	.-64     	; 0x1bc <Write_MFRC522>
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <MFRC522_ClearBitMask>:
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	d8 2f       	mov	r29, r24
 208:	c6 2f       	mov	r28, r22
 20a:	e3 df       	rcall	.-58     	; 0x1d2 <Read_MFRC522>
 20c:	c0 95       	com	r28
 20e:	68 2f       	mov	r22, r24
 210:	6c 23       	and	r22, r28
 212:	8d 2f       	mov	r24, r29
 214:	d3 df       	rcall	.-90     	; 0x1bc <Write_MFRC522>
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <MFRC522_ToCard>:
 21c:	7f 92       	push	r7
 21e:	8f 92       	push	r8
 220:	9f 92       	push	r9
 222:	af 92       	push	r10
 224:	bf 92       	push	r11
 226:	cf 92       	push	r12
 228:	df 92       	push	r13
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	b8 2e       	mov	r11, r24
 238:	c6 2f       	mov	r28, r22
 23a:	d7 2f       	mov	r29, r23
 23c:	c4 2e       	mov	r12, r20
 23e:	a2 2e       	mov	r10, r18
 240:	93 2e       	mov	r9, r19
 242:	78 01       	movw	r14, r16
 244:	8c e0       	ldi	r24, 0x0C	; 12
 246:	b8 16       	cp	r11, r24
 248:	09 f4       	brne	.+2      	; 0x24c <MFRC522_ToCard+0x30>
 24a:	a6 c0       	rjmp	.+332    	; 0x398 <MFRC522_ToCard+0x17c>
 24c:	ee e0       	ldi	r30, 0x0E	; 14
 24e:	be 16       	cp	r11, r30
 250:	09 f4       	brne	.+2      	; 0x254 <MFRC522_ToCard+0x38>
 252:	bf c0       	rjmp	.+382    	; 0x3d2 <MFRC522_ToCard+0x1b6>
 254:	60 e8       	ldi	r22, 0x80	; 128
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	b1 df       	rcall	.-158    	; 0x1bc <Write_MFRC522>
 25a:	60 e8       	ldi	r22, 0x80	; 128
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	d1 df       	rcall	.-94     	; 0x202 <MFRC522_ClearBitMask>
 260:	60 e8       	ldi	r22, 0x80	; 128
 262:	8a e0       	ldi	r24, 0x0A	; 10
 264:	c2 df       	rcall	.-124    	; 0x1ea <MFRC522_SetBitMask>
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	a8 df       	rcall	.-176    	; 0x1bc <Write_MFRC522>
 26c:	d1 2c       	mov	r13, r1
 26e:	c1 14       	cp	r12, r1
 270:	d1 04       	cpc	r13, r1
 272:	09 f1       	breq	.+66     	; 0x2b6 <MFRC522_ToCard+0x9a>
 274:	71 2c       	mov	r7, r1
 276:	81 2c       	mov	r8, r1
 278:	10 c0       	rjmp	.+32     	; 0x29a <MFRC522_ToCard+0x7e>
 27a:	0f 2e       	mov	r0, r31
 27c:	f0 e3       	ldi	r31, 0x30	; 48
 27e:	7f 2e       	mov	r7, r31
 280:	f0 2d       	mov	r31, r0
 282:	0f 2e       	mov	r0, r31
 284:	f7 e7       	ldi	r31, 0x77	; 119
 286:	8f 2e       	mov	r8, r31
 288:	f0 2d       	mov	r31, r0
 28a:	07 c0       	rjmp	.+14     	; 0x29a <MFRC522_ToCard+0x7e>
 28c:	68 94       	set
 28e:	77 24       	eor	r7, r7
 290:	74 f8       	bld	r7, 4
 292:	0f 2e       	mov	r0, r31
 294:	f2 e1       	ldi	r31, 0x12	; 18
 296:	8f 2e       	mov	r8, r31
 298:	f0 2d       	mov	r31, r0
 29a:	0c 2f       	mov	r16, r28
 29c:	1d 2f       	mov	r17, r29
 29e:	c0 e0       	ldi	r28, 0x00	; 0
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
 2a2:	f8 01       	movw	r30, r16
 2a4:	61 91       	ld	r22, Z+
 2a6:	8f 01       	movw	r16, r30
 2a8:	89 e0       	ldi	r24, 0x09	; 9
 2aa:	88 df       	rcall	.-240    	; 0x1bc <Write_MFRC522>
 2ac:	21 96       	adiw	r28, 0x01	; 1
 2ae:	cc 15       	cp	r28, r12
 2b0:	dd 05       	cpc	r29, r13
 2b2:	b8 f3       	brcs	.-18     	; 0x2a2 <MFRC522_ToCard+0x86>
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <MFRC522_ToCard+0x9e>
 2b6:	71 2c       	mov	r7, r1
 2b8:	81 2c       	mov	r8, r1
 2ba:	6b 2d       	mov	r22, r11
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	7e df       	rcall	.-260    	; 0x1bc <Write_MFRC522>
 2c0:	fc e0       	ldi	r31, 0x0C	; 12
 2c2:	bf 12       	cpse	r11, r31
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <MFRC522_ToCard+0xb0>
 2c6:	60 e8       	ldi	r22, 0x80	; 128
 2c8:	8d e0       	ldi	r24, 0x0D	; 13
 2ca:	8f df       	rcall	.-226    	; 0x1ea <MFRC522_SetBitMask>
 2cc:	84 e0       	ldi	r24, 0x04	; 4
 2ce:	81 df       	rcall	.-254    	; 0x1d2 <Read_MFRC522>
 2d0:	18 2f       	mov	r17, r24
 2d2:	cf ec       	ldi	r28, 0xCF	; 207
 2d4:	d7 e0       	ldi	r29, 0x07	; 7
 2d6:	07 2d       	mov	r16, r7
 2d8:	01 60       	ori	r16, 0x01	; 1
 2da:	06 c0       	rjmp	.+12     	; 0x2e8 <MFRC522_ToCard+0xcc>
 2dc:	84 e0       	ldi	r24, 0x04	; 4
 2de:	79 df       	rcall	.-270    	; 0x1d2 <Read_MFRC522>
 2e0:	18 2f       	mov	r17, r24
 2e2:	21 97       	sbiw	r28, 0x01	; 1
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <MFRC522_ToCard+0xcc>
 2e6:	87 c0       	rjmp	.+270    	; 0x3f6 <MFRC522_ToCard+0x1da>
 2e8:	91 2f       	mov	r25, r17
 2ea:	90 23       	and	r25, r16
 2ec:	b9 f3       	breq	.-18     	; 0x2dc <MFRC522_ToCard+0xc0>
 2ee:	88 c0       	rjmp	.+272    	; 0x400 <__FUSE_REGION_LENGTH__>
 2f0:	88 2d       	mov	r24, r8
 2f2:	81 70       	andi	r24, 0x01	; 1
 2f4:	18 23       	and	r17, r24
 2f6:	c1 e0       	ldi	r28, 0x01	; 1
 2f8:	09 f4       	brne	.+2      	; 0x2fc <MFRC522_ToCard+0xe0>
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
 2fc:	8c e0       	ldi	r24, 0x0C	; 12
 2fe:	b8 12       	cpse	r11, r24
 300:	88 c0       	rjmp	.+272    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 302:	8a e0       	ldi	r24, 0x0A	; 10
 304:	66 df       	rcall	.-308    	; 0x1d2 <Read_MFRC522>
 306:	d8 2f       	mov	r29, r24
 308:	8c e0       	ldi	r24, 0x0C	; 12
 30a:	63 df       	rcall	.-314    	; 0x1d2 <Read_MFRC522>
 30c:	28 2f       	mov	r18, r24
 30e:	27 70       	andi	r18, 0x07	; 7
 310:	79 f0       	breq	.+30     	; 0x330 <MFRC522_ToCard+0x114>
 312:	8d 2f       	mov	r24, r29
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	82 0f       	add	r24, r18
 326:	91 1d       	adc	r25, r1
 328:	f7 01       	movw	r30, r14
 32a:	91 83       	std	Z+1, r25	; 0x01
 32c:	80 83       	st	Z, r24
 32e:	0b c0       	rjmp	.+22     	; 0x346 <MFRC522_ToCard+0x12a>
 330:	8d 2f       	mov	r24, r29
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	f7 01       	movw	r30, r14
 342:	91 83       	std	Z+1, r25	; 0x01
 344:	80 83       	st	Z, r24
 346:	dd 23       	and	r29, r29
 348:	49 f0       	breq	.+18     	; 0x35c <MFRC522_ToCard+0x140>
 34a:	d1 31       	cpi	r29, 0x11	; 17
 34c:	08 f0       	brcs	.+2      	; 0x350 <MFRC522_ToCard+0x134>
 34e:	d0 e1       	ldi	r29, 0x10	; 16
 350:	ed 2e       	mov	r14, r29
 352:	f1 2c       	mov	r15, r1
 354:	e1 14       	cp	r14, r1
 356:	f1 04       	cpc	r15, r1
 358:	21 f4       	brne	.+8      	; 0x362 <MFRC522_ToCard+0x146>
 35a:	5b c0       	rjmp	.+182    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 35c:	ee 24       	eor	r14, r14
 35e:	e3 94       	inc	r14
 360:	f1 2c       	mov	r15, r1
 362:	ca 2c       	mov	r12, r10
 364:	d9 2c       	mov	r13, r9
 366:	00 e0       	ldi	r16, 0x00	; 0
 368:	10 e0       	ldi	r17, 0x00	; 0
 36a:	89 e0       	ldi	r24, 0x09	; 9
 36c:	32 df       	rcall	.-412    	; 0x1d2 <Read_MFRC522>
 36e:	f6 01       	movw	r30, r12
 370:	81 93       	st	Z+, r24
 372:	6f 01       	movw	r12, r30
 374:	0f 5f       	subi	r16, 0xFF	; 255
 376:	1f 4f       	sbci	r17, 0xFF	; 255
 378:	0e 15       	cp	r16, r14
 37a:	1f 05       	cpc	r17, r15
 37c:	b0 f3       	brcs	.-20     	; 0x36a <MFRC522_ToCard+0x14e>
 37e:	49 c0       	rjmp	.+146    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 380:	6c e0       	ldi	r22, 0x0C	; 12
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	1b df       	rcall	.-458    	; 0x1bc <Write_MFRC522>
 386:	0f 2e       	mov	r0, r31
 388:	f0 e3       	ldi	r31, 0x30	; 48
 38a:	7f 2e       	mov	r7, r31
 38c:	f0 2d       	mov	r31, r0
 38e:	0f 2e       	mov	r0, r31
 390:	f7 e7       	ldi	r31, 0x77	; 119
 392:	8f 2e       	mov	r8, r31
 394:	f0 2d       	mov	r31, r0
 396:	97 cf       	rjmp	.-210    	; 0x2c6 <MFRC522_ToCard+0xaa>
 398:	67 ef       	ldi	r22, 0xF7	; 247
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	0f df       	rcall	.-482    	; 0x1bc <Write_MFRC522>
 39e:	60 e8       	ldi	r22, 0x80	; 128
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	2f df       	rcall	.-418    	; 0x202 <MFRC522_ClearBitMask>
 3a4:	60 e8       	ldi	r22, 0x80	; 128
 3a6:	8a e0       	ldi	r24, 0x0A	; 10
 3a8:	20 df       	rcall	.-448    	; 0x1ea <MFRC522_SetBitMask>
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	06 df       	rcall	.-500    	; 0x1bc <Write_MFRC522>
 3b0:	d1 2c       	mov	r13, r1
 3b2:	c1 14       	cp	r12, r1
 3b4:	d1 04       	cpc	r13, r1
 3b6:	09 f0       	breq	.+2      	; 0x3ba <MFRC522_ToCard+0x19e>
 3b8:	60 cf       	rjmp	.-320    	; 0x27a <MFRC522_ToCard+0x5e>
 3ba:	e2 cf       	rjmp	.-60     	; 0x380 <MFRC522_ToCard+0x164>
 3bc:	6e e0       	ldi	r22, 0x0E	; 14
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	fd de       	rcall	.-518    	; 0x1bc <Write_MFRC522>
 3c2:	68 94       	set
 3c4:	77 24       	eor	r7, r7
 3c6:	74 f8       	bld	r7, 4
 3c8:	0f 2e       	mov	r0, r31
 3ca:	f2 e1       	ldi	r31, 0x12	; 18
 3cc:	8f 2e       	mov	r8, r31
 3ce:	f0 2d       	mov	r31, r0
 3d0:	7d cf       	rjmp	.-262    	; 0x2cc <MFRC522_ToCard+0xb0>
 3d2:	62 e9       	ldi	r22, 0x92	; 146
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	f2 de       	rcall	.-540    	; 0x1bc <Write_MFRC522>
 3d8:	60 e8       	ldi	r22, 0x80	; 128
 3da:	84 e0       	ldi	r24, 0x04	; 4
 3dc:	12 df       	rcall	.-476    	; 0x202 <MFRC522_ClearBitMask>
 3de:	60 e8       	ldi	r22, 0x80	; 128
 3e0:	8a e0       	ldi	r24, 0x0A	; 10
 3e2:	03 df       	rcall	.-506    	; 0x1ea <MFRC522_SetBitMask>
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	e9 de       	rcall	.-558    	; 0x1bc <Write_MFRC522>
 3ea:	d1 2c       	mov	r13, r1
 3ec:	c1 14       	cp	r12, r1
 3ee:	d1 04       	cpc	r13, r1
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <MFRC522_ToCard+0x1d8>
 3f2:	4c cf       	rjmp	.-360    	; 0x28c <MFRC522_ToCard+0x70>
 3f4:	e3 cf       	rjmp	.-58     	; 0x3bc <MFRC522_ToCard+0x1a0>
 3f6:	60 e8       	ldi	r22, 0x80	; 128
 3f8:	8d e0       	ldi	r24, 0x0D	; 13
 3fa:	03 df       	rcall	.-506    	; 0x202 <MFRC522_ClearBitMask>
 3fc:	c2 e0       	ldi	r28, 0x02	; 2
 3fe:	09 c0       	rjmp	.+18     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 400:	60 e8       	ldi	r22, 0x80	; 128
 402:	8d e0       	ldi	r24, 0x0D	; 13
 404:	fe de       	rcall	.-516    	; 0x202 <MFRC522_ClearBitMask>
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	e4 de       	rcall	.-568    	; 0x1d2 <Read_MFRC522>
 40a:	8b 71       	andi	r24, 0x1B	; 27
 40c:	09 f4       	brne	.+2      	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 40e:	70 cf       	rjmp	.-288    	; 0x2f0 <MFRC522_ToCard+0xd4>
 410:	c2 e0       	ldi	r28, 0x02	; 2
 412:	8c 2f       	mov	r24, r28
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	ff 90       	pop	r15
 41e:	ef 90       	pop	r14
 420:	df 90       	pop	r13
 422:	cf 90       	pop	r12
 424:	bf 90       	pop	r11
 426:	af 90       	pop	r10
 428:	9f 90       	pop	r9
 42a:	8f 90       	pop	r8
 42c:	7f 90       	pop	r7
 42e:	08 95       	ret

00000430 <MFRC522_Request>:
 430:	ef 92       	push	r14
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	00 d0       	rcall	.+0      	; 0x43e <MFRC522_Request+0xe>
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	18 2f       	mov	r17, r24
 444:	7b 01       	movw	r14, r22
 446:	67 e0       	ldi	r22, 0x07	; 7
 448:	8d e0       	ldi	r24, 0x0D	; 13
 44a:	b8 de       	rcall	.-656    	; 0x1bc <Write_MFRC522>
 44c:	f7 01       	movw	r30, r14
 44e:	10 83       	st	Z, r17
 450:	8e 01       	movw	r16, r28
 452:	0f 5f       	subi	r16, 0xFF	; 255
 454:	1f 4f       	sbci	r17, 0xFF	; 255
 456:	97 01       	movw	r18, r14
 458:	41 e0       	ldi	r20, 0x01	; 1
 45a:	b7 01       	movw	r22, r14
 45c:	8c e0       	ldi	r24, 0x0C	; 12
 45e:	de de       	rcall	.-580    	; 0x21c <MFRC522_ToCard>
 460:	81 11       	cpse	r24, r1
 462:	07 c0       	rjmp	.+14     	; 0x472 <__stack+0x13>
 464:	29 81       	ldd	r18, Y+1	; 0x01
 466:	3a 81       	ldd	r19, Y+2	; 0x02
 468:	20 31       	cpi	r18, 0x10	; 16
 46a:	31 05       	cpc	r19, r1
 46c:	19 f0       	breq	.+6      	; 0x474 <__stack+0x15>
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	01 c0       	rjmp	.+2      	; 0x474 <__stack+0x15>
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	08 95       	ret

00000486 <MFRC522_Anticoll>:
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	00 d0       	rcall	.+0      	; 0x494 <MFRC522_Anticoll+0xe>
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	7c 01       	movw	r14, r24
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	8d e0       	ldi	r24, 0x0D	; 13
 49e:	8e de       	rcall	.-740    	; 0x1bc <Write_MFRC522>
 4a0:	83 e9       	ldi	r24, 0x93	; 147
 4a2:	f7 01       	movw	r30, r14
 4a4:	80 83       	st	Z, r24
 4a6:	80 e2       	ldi	r24, 0x20	; 32
 4a8:	81 83       	std	Z+1, r24	; 0x01
 4aa:	8e 01       	movw	r16, r28
 4ac:	0f 5f       	subi	r16, 0xFF	; 255
 4ae:	1f 4f       	sbci	r17, 0xFF	; 255
 4b0:	97 01       	movw	r18, r14
 4b2:	42 e0       	ldi	r20, 0x02	; 2
 4b4:	b7 01       	movw	r22, r14
 4b6:	8c e0       	ldi	r24, 0x0C	; 12
 4b8:	b1 de       	rcall	.-670    	; 0x21c <MFRC522_ToCard>
 4ba:	81 11       	cpse	r24, r1
 4bc:	0e c0       	rjmp	.+28     	; 0x4da <MFRC522_Anticoll+0x54>
 4be:	f7 01       	movw	r30, r14
 4c0:	a7 01       	movw	r20, r14
 4c2:	4c 5f       	subi	r20, 0xFC	; 252
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	21 91       	ld	r18, Z+
 4ca:	92 27       	eor	r25, r18
 4cc:	e4 17       	cp	r30, r20
 4ce:	f5 07       	cpc	r31, r21
 4d0:	d9 f7       	brne	.-10     	; 0x4c8 <MFRC522_Anticoll+0x42>
 4d2:	f7 01       	movw	r30, r14
 4d4:	24 81       	ldd	r18, Z+4	; 0x04
 4d6:	29 13       	cpse	r18, r25
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	0f 90       	pop	r0
 4dc:	0f 90       	pop	r0
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	08 95       	ret

000004ec <MFRC522_AntennaOn>:
* Input parameter:null
* Return:null
*/
void MFRC522_AntennaOn(void){
	uchar temp;
	temp = Read_MFRC522(TxControlReg);
 4ec:	84 e1       	ldi	r24, 0x14	; 20
 4ee:	71 de       	rcall	.-798    	; 0x1d2 <Read_MFRC522>
	if (!(temp & 0x03)){
 4f0:	83 70       	andi	r24, 0x03	; 3
 4f2:	19 f4       	brne	.+6      	; 0x4fa <MFRC522_AntennaOn+0xe>
		MFRC522_SetBitMask(TxControlReg, 0x03);
 4f4:	63 e0       	ldi	r22, 0x03	; 3
 4f6:	84 e1       	ldi	r24, 0x14	; 20
 4f8:	78 de       	rcall	.-784    	; 0x1ea <MFRC522_SetBitMask>
 4fa:	08 95       	ret

000004fc <MFRC522_Init>:
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
}

void MFRC522_Init(void){
	
	spi_init(0);
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	1d d0       	rcall	.+58     	; 0x53a <spi_init>

	// Setup the Pins
	
	pinSlaveSelect_OUTPUT; // Set digital pin 10 as OUTPUT to connect it to the RFID /ENABLE pin
 500:	a0 9a       	sbi	0x14, 0	; 20
	pinSlaveSelect_LOW; // Activate the RFID reader
 502:	a8 98       	cbi	0x15, 0	; 21
 504:	89 ef       	ldi	r24, 0xF9	; 249
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <MFRC522_Init+0xc>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <MFRC522_Init+0x12>
 50e:	00 00       	nop
	//pinReset_LOW;
	_delay_ms(1);
	// activate
	//pinReset_HIGH;

	MFRC522_Reset();
 510:	68 de       	rcall	.-816    	; 0x1e2 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);	//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 512:	6d e8       	ldi	r22, 0x8D	; 141
 514:	8a e2       	ldi	r24, 0x2A	; 42
 516:	52 de       	rcall	.-860    	; 0x1bc <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 518:	6e e3       	ldi	r22, 0x3E	; 62
 51a:	8b e2       	ldi	r24, 0x2B	; 43
 51c:	4f de       	rcall	.-866    	; 0x1bc <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 51e:	6e e1       	ldi	r22, 0x1E	; 30
 520:	8d e2       	ldi	r24, 0x2D	; 45
 522:	4c de       	rcall	.-872    	; 0x1bc <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	8c e2       	ldi	r24, 0x2C	; 44
 528:	49 de       	rcall	.-878    	; 0x1bc <Write_MFRC522>
	Write_MFRC522(TxAutoReg, 0x40);	//100%ASK
 52a:	60 e4       	ldi	r22, 0x40	; 64
 52c:	85 e1       	ldi	r24, 0x15	; 21
 52e:	46 de       	rcall	.-884    	; 0x1bc <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);	//CRC initilizate value 0x6363 ???
 530:	6d e3       	ldi	r22, 0x3D	; 61
 532:	81 e1       	ldi	r24, 0x11	; 17
 534:	43 de       	rcall	.-890    	; 0x1bc <Write_MFRC522>
	//ClearBitMask(Status2Reg, 0x08); //MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86); //RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F); //RxGain = 48dB
	//Write_MFRC522(GsNReg, 0xFF);
	//Write_MFRC522(CWGsPReg, 0xFF);
	MFRC522_AntennaOn();	//turn on antenna
 536:	da df       	rcall	.-76     	; 0x4ec <MFRC522_AntennaOn>
 538:	08 95       	ret

0000053a <spi_init>:

#include "spi.h"


void spi_init(uint8_t setup){
 SPI_DDR |= (1<<SPI_MOSI_BIT)|(1<<SPI_SCK_BIT)|(1<<SPI_CS_BIT);
 53a:	97 b3       	in	r25, 0x17	; 23
 53c:	9c 62       	ori	r25, 0x2C	; 44
 53e:	97 bb       	out	0x17, r25	; 23

 SPCR = (1<<SPE)|(1<<MSTR)|setup;
 540:	80 65       	ori	r24, 0x50	; 80
 542:	8d b9       	out	0x0d, r24	; 13
 544:	08 95       	ret

00000546 <spi_send_byte>:
}

void spi_send_byte(uint8_t data){
 SPDR = data;
 546:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR & (1<<SPIF)));
 548:	77 9b       	sbis	0x0e, 7	; 14
 54a:	fe cf       	rjmp	.-4      	; 0x548 <spi_send_byte+0x2>
}
 54c:	08 95       	ret

0000054e <spi_read_byte>:

uint8_t spi_read_byte(void){
 SPDR = 0x00;
 54e:	1f b8       	out	0x0f, r1	; 15
 while(!(SPSR & (1<<SPIF)));
 550:	77 9b       	sbis	0x0e, 7	; 14
 552:	fe cf       	rjmp	.-4      	; 0x550 <spi_read_byte+0x2>
 return SPDR;
 554:	8f b1       	in	r24, 0x0f	; 15
 556:	08 95       	ret

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>
